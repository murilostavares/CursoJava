//[X]Encapsulamento
//  private
//  pacote (Não declara nada)
//  public
//  
//JavaBean (Padrão Comunidade Java)
//*Nome de Classe
//	Começar com a primeira Letra maiúscula e as demais minúsculas.
//	Caso seja um nome composto a primeira letra de cada palavra deve ser maiúscula.
//	Ex: Contato, PessoaFisica, RelatorioPagamento
//*Nome de metodos e varáveis
//	Devem ser escritos em letra minúscula.
//	Caso seja um nome composto a primeira letra a partir da segunda palavra deve ficar com letra maiúscula.
//	Ex: nome, idade, dataPagamento,processar(), imprimirRelatorio()
//*Encapsulamento
//	propriedades (cariaveis de intância ou de classe) devem possuir visibilidade privada (private)
//
// 	Cada propriedade deve ser exposta através da definidção de métodos de configuração e acesso.
//
//	Os métodos de configuração e acesso devem possuir visibilidade pública (public)
//
// 	Todo método de configuração deve possuir o prefixo 'set' seguido do nome da propriedade. Os métodos de configuração devem posuuir o tipo de retorno void e precisam possuir exatamente um parâmetro na listagem de parâmetros, que deve ser do mesmo tipo da propriedade.
//	Todo método de acesso deve possuir o prefixo 'get' seguido do nome da propriedade. (vazio)
//	Opcionalmente os métodos de acesso de propriedades boolean podem utilizar o prefixo 'is'
//	Os métodos de acesso devem possuir como tipo de retorno exatamente o mesmo tipo da propriedade e não devem possuir parâmetros em sua listagem de parâmetros.
//
// [X]Herança
//
// extends = é um (Ex. Vendedor é um Funcionário)
//
// Usa questões implementados;
//
//
//
// Usar anotação "@Override" sinaliza as sobreescrições
//-----------------------------------------------------------------------------------------------------------------------------
// Diagrama de Classes
//
//
//			 _______________________________
//			|NOME DA CLASSE Ex: Pessoa		|
//			|								|
//			|_______________________________|
//			|								|
//			|PROPRIEDADES					|
//			|	- Nome: String				|
//			|	- Idade: Int				|
//			|_______________________________|
//			|								|
//			|METODOS:						|
//			|	+ Comer: Void				|
//			|	+ Andar (Passos:int):Void	|
//			|								|
//			|_______________________________|
//
//
//
//+ PUBLICO
//- PRIVADO
//~ DEFAULT (PACKAGE)
//# PROTECT
//



// FELIPEDAROSAOLIVEIRA (GITHUB)



/*método abstrato!
 * 
 * public abstract void
 * 
 * Não é necessario corpo
 * Para um método abstrato é necessário que a classe seja abstrata.
 * Não pode mais instanciar a classe direto.
 * Tem que instacniar uma public 
 * Tem sempre que sobrescrever um abstract no herança
 * 
 * 
 * INTERFACE!
 * 
 * "Class", com métodos 100% abstratos;
 * extends + implements
 * 
 * 
 */



